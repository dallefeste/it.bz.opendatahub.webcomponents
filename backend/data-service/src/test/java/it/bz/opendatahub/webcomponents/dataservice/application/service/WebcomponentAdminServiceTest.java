// SPDX-FileCopyrightText: NOI Techpark <digital@noi.bz.it>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

package it.bz.opendatahub.webcomponents.dataservice.application.service;

import it.bz.opendatahub.webcomponents.common.testing.BeanAssert;
import it.bz.opendatahub.webcomponents.dataservice.application.domain.Webcomponent;
import it.bz.opendatahub.webcomponents.dataservice.application.port.in.CreateWebcomponentUseCase;
import it.bz.opendatahub.webcomponents.dataservice.application.port.in.ReplaceWebcomponentLogoUseCase;
import it.bz.opendatahub.webcomponents.dataservice.application.port.in.UpdateWebcomponentUseCase;
import it.bz.opendatahub.webcomponents.dataservice.application.port.out.ReadWebcomponentPort;
import it.bz.opendatahub.webcomponents.dataservice.application.port.out.WriteWebcomponentPort;
import it.bz.opendatahub.webcomponents.dataservice.application.port.out.WriteWorkspacePort;
import it.bz.opendatahub.webcomponents.dataservice.exception.impl.NotFoundException;
import lombok.val;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.ArrayList;

import static org.assertj.core.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

class WebcomponentAdminServiceTest {
	private ReadWebcomponentPort readWebcomponentPort;
	private WriteWebcomponentPort writeWebcomponentPort;
	private WriteWorkspacePort writeWorkspacePort;

	private WebcomponentAdminService webcomponentAdminService;

	private static final Webcomponent WEBCOMPONENT_A = new Webcomponent();

	private static final String NON_EXISTING_ID = "Z";

	private static final String JPEG_BASE64 = "";
	private static final String PNG_BASE64 = "";

	@BeforeEach
	void initMocks() {
		WEBCOMPONENT_A.setUuid("A");
		WEBCOMPONENT_A.setImage("image.png");
		WEBCOMPONENT_A.setDeleted(false);

		readWebcomponentPort = Mockito.mock(ReadWebcomponentPort.class);
		writeWebcomponentPort = Mockito.mock(WriteWebcomponentPort.class);
		writeWorkspacePort = Mockito.mock(WriteWorkspacePort.class);

		webcomponentAdminService = new WebcomponentAdminService(readWebcomponentPort, writeWebcomponentPort, writeWorkspacePort);
	}

	@Test
	void deleteWebcomponentByIdThrowsIfIdIsNull() {
		assertThatNullPointerException().isThrownBy(
			() -> webcomponentAdminService.deleteWebcomponentById(null)
		);
	}

	@Test
	void deleteWebcomponentByIdDoesNotThrowIfNotExists() {
		when(readWebcomponentPort.getWebcomponentById(NON_EXISTING_ID)).thenThrow(new NotFoundException(""));

		assertThatCode(
			() -> webcomponentAdminService.deleteWebcomponentById(NON_EXISTING_ID)
		).doesNotThrowAnyException();
	}

	@Test
	void deleteWebcomponentByIdDoesNotThrowIfAlreadyDeleted() {
		when(readWebcomponentPort.getWebcomponentById(WEBCOMPONENT_A.getUuid())).thenReturn(WEBCOMPONENT_A);
		WEBCOMPONENT_A.setDeleted(true);

		assertThatCode(
			() -> webcomponentAdminService.deleteWebcomponentById(WEBCOMPONENT_A.getUuid())
		).doesNotThrowAnyException();
	}

	@Test
	void deleteWebcomponentByIdDoesSetDeletedFlag() {
		when(readWebcomponentPort.getWebcomponentById(WEBCOMPONENT_A.getUuid())).thenReturn(WEBCOMPONENT_A);

		webcomponentAdminService.deleteWebcomponentById(WEBCOMPONENT_A.getUuid());

		assertThat(WEBCOMPONENT_A.getDeleted()).isTrue();
	}

	@Test
	void deleteWebcomponentByIdDoesSave() {
		when(readWebcomponentPort.getWebcomponentById(WEBCOMPONENT_A.getUuid())).thenReturn(WEBCOMPONENT_A);

		webcomponentAdminService.deleteWebcomponentById(WEBCOMPONENT_A.getUuid());

		verify(writeWebcomponentPort, times(1)).saveWebcomponent(WEBCOMPONENT_A);
	}

	@Test
	void updateWebcomponentThrowsWhenNullUuid() {
		assertThatNullPointerException().isThrownBy(
			() -> webcomponentAdminService.updateWebcomponent(null, new UpdateWebcomponentUseCase.WebcomponentUpdateRequest())
		);
	}

	@Test
	void updateWebcomponentThrowesWhenNullUpdateRequest() {
		assertThatNullPointerException().isThrownBy(
			() -> webcomponentAdminService.updateWebcomponent("abx", null)
		);
	}

	@Test
	void updateWebcomponentDoesSave() {
		when(readWebcomponentPort.getWebcomponentById(WEBCOMPONENT_A.getUuid())).thenReturn(WEBCOMPONENT_A);

		webcomponentAdminService.updateWebcomponent(WEBCOMPONENT_A.getUuid(), new UpdateWebcomponentUseCase.WebcomponentUpdateRequest());

		verify(writeWebcomponentPort, times(1)).saveWebcomponent(WEBCOMPONENT_A);
	}

	@Test
	void updateWebcomponentDoesUpdateAllFields() {
		when(readWebcomponentPort.getWebcomponentById(WEBCOMPONENT_A.getUuid())).thenReturn(WEBCOMPONENT_A);
		when(writeWebcomponentPort.saveWebcomponent(WEBCOMPONENT_A)).thenReturn(WEBCOMPONENT_A);

		val request = new UpdateWebcomponentUseCase.WebcomponentUpdateRequest();
		request.setTitle("");
		request.setDescription("a2");
		request.setDescriptionAbstract("a3");
		request.setLicense("a4");
		request.setRepositoryUrl("a5");
		request.setCopyrightHolders(new ArrayList<>());
		request.setAuthors(new ArrayList<>());
		request.setSearchTags(new ArrayList<>());

		val result = webcomponentAdminService.updateWebcomponent(WEBCOMPONENT_A.getUuid(), request);

		assertThat(result.getTitle()).isEqualTo(request.getTitle());

		BeanAssert.assertThat(result).hasCopiedAllProperties(request);
	}

	@Test
	void createWebcomponentThrowsIfArgumentIsNull() {
		assertThatNullPointerException().isThrownBy(
			() -> webcomponentAdminService.createWebcomponent(null)
		);
	}

	@Test
	void createWebcomponentDoesSave() {
		when(writeWebcomponentPort.saveWebcomponent(any())).thenAnswer(i -> i.getArguments()[0]);
		when(readWebcomponentPort.getWebcomponentById(any())).thenReturn(WEBCOMPONENT_A);

		val request = new CreateWebcomponentUseCase.WebcomponentCreateRequest();
		request.setImagePngBase64(PNG_BASE64);

		webcomponentAdminService.createWebcomponent(request);

		verify(writeWebcomponentPort, times(1)).saveWebcomponent(any());
	}

	@Test
	void createWebcomponentDoesTriggerLogoUpdate() {
		val request = new CreateWebcomponentUseCase.WebcomponentCreateRequest();
		request.setImagePngBase64(PNG_BASE64);

		webcomponentAdminService.createWebcomponent(request);

		verify(writeWorkspacePort, times(2)).wipe(any());
		verify(writeWorkspacePort, times(1)).writeFile(any(), any());
	}

	@Test
	void createWebcomponentDoesSetCorrectData() {
		when(writeWebcomponentPort.saveWebcomponent(any())).thenAnswer(i -> i.getArguments()[0]);
		when(readWebcomponentPort.getWebcomponentById(any())).thenReturn(WEBCOMPONENT_A);

		val request = new CreateWebcomponentUseCase.WebcomponentCreateRequest();
		request.setTitle("");
		request.setDescription("");
		request.setDescriptionAbstract("");
		request.setLicense("");
		request.setRepositoryUrl("");
		request.setCopyrightHolders(new ArrayList<>());
		request.setImagePngBase64(PNG_BASE64);
		request.setAuthors(new ArrayList<>());
		request.setSearchTags(new ArrayList<>());

		val result = webcomponentAdminService.createWebcomponent(request);

		BeanAssert.assertThat(result).hasCopiedAllProperties(request, "imagePngBase64");

		assertThat(result.getUuid()).isNotBlank();
		assertThat(result.getDeleted()).isFalse();
		assertThat(result.getImage()).isNotBlank();
	}

	@Test
	void replaceLogoDoesTriggerLogoUpdate() {
		when(readWebcomponentPort.getWebcomponentById(any())).thenReturn(WEBCOMPONENT_A);

		val request = new ReplaceWebcomponentLogoUseCase.WebcomponentLogoReplaceRequest();
		request.setLogoPngBase64(PNG_BASE64);

		webcomponentAdminService.replaceLogo(WEBCOMPONENT_A.getUuid(), request);

		verify(writeWorkspacePort, times(2)).wipe(any());
		verify(writeWorkspacePort, times(1)).writeFile(any(), any());
	}

	@Test
	void updateLogoThrowsIfInvalidBase64() {
		assertThatIllegalArgumentException().isThrownBy(
			() -> webcomponentAdminService.updateLogo(WEBCOMPONENT_A, "blablabla")
		);
	}

	@Test
	void updateLogoThrowsIfNotAPng() {
		assertThatIllegalArgumentException().isThrownBy(
			() -> webcomponentAdminService.updateLogo(WEBCOMPONENT_A, JPEG_BASE64)
		);
	}

	@Test
	void updateLogoDoesNotThrowIfValidPng() {
		assertThatCode(
			() -> webcomponentAdminService.updateLogo(WEBCOMPONENT_A, PNG_BASE64)
		).doesNotThrowAnyException();
	}
}
